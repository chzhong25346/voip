<joblist>
  <job>
    <description></description>
    <executionEnabled>true</executionEnabled>
    <id>82e64f41-75e8-41e0-9a1a-efd3b4ccc30b</id>
    <loglevel>INFO</loglevel>
    <name>ListTP</name>
    <notification>
      <onsuccess>
        <email attachLog='true' recipients='c.zhong@fcl.ca' subject='ListTP' />
      </onsuccess>
    </notification>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/usr/bin/python3.4

import ssl
import urllib
import sys, getopt, re, requests
from suds.transport.https import HttpAuthenticated
from suds.client import Client
from suds.sax.element import Element
from xml.etree import ElementTree
from suds.xsd.doctor import Import
from suds.xsd.doctor import ImportDoctor
import pickle
import pandas as pd
import numpy as np

ris_data = []

def pk():
    pickle_in = open("/opt/credential/pwds","rb")
    dict = pickle.load(pickle_in)
    return dict

def createClient():
        cmserver = '10.41.40.10'
        cmport = '8443'
        username = 'ccmadmin'
        pwd = pk()
        password = pwd[1]
        location = 'https://' + cmserver + ':' + cmport + '/realtimeservice/services/RisPort70?wsdl'

        t = HttpAuthenticated(username=username, password=password)
        t.handler=urllib.request.HTTPBasicAuthHandler(t.pm)

        ssl_def_context = ssl.create_default_context()
        ssl_def_context.check_hostname = False
        ssl_def_context.verify_mode = ssl.CERT_NONE

        t1=urllib.request.HTTPSHandler(context=ssl_def_context)
        t.urlopener = urllib.request.build_opener(t.handler,t1)
        wsdl ='file:///opt/tempfile/axlsqltoolkit/schema/current/AXLAPI.wsdl'

        imp = Import('http://schemas.xmlsoap.org/soap/encoding/')
        doctor = ImportDoctor(imp)

        client=Client(url=location, transport=t, doctor=doctor)
        return client

def parse(tp):
        for node in tp['SelectCmDeviceResult'].CmNodes:
            for dev in node.CmDevices:
                name = dev.Name
                desc = dev.Description
                dirn = dev.DirNumber
                ip = "http://" + dev.IPAddress[0][0] + "/web/signin"
                global ris_data
                ris_data.append([desc,name,dirn,ip])

def tpIPsx10(client):
        tp = client.service.SelectCmDevice("", {'SelectBy':'Name', 'Status':'Any', 'Class':'Any',
                                                'NodeName':'cucm8-sub1.ad.crs','Model':'682'})
        parse(tp) 

def tpIPsx80(client):
        tp = client.service.SelectCmDevice("", {'SelectBy':'Name', 'Status':'Any', 'Class':'Any',
                                                'NodeName':'cucm8-sub.ad.crs','Model':'688'})
        parse(tp)

def tpIPmx300(client):
        tp = client.service.SelectCmDevice("", {'SelectBy':'Name', 'Status':'Any', 'Class':'Any',
                                               'NodeName':'cucm8-sub.ad.crs','Model':'690'})
        parse(tp)

      
def tpIPmx800crc(client):
        tp = client.service.SelectCmDevice("", {'SelectBy':'Name', 'Status':'Any', 'Class':'Any',
                                                   'NodeName':'cucm8-sub1.ad.crs','Model':'36208'})
        parse(tp)


def tpIPmx800(client):
        tp = client.service.SelectCmDevice("", {'SelectBy':'Name', 'Status':'Any', 'Class':'Any',
                                                   'NodeName':'cucm8-sub.ad.crs','Model':'36208'})
        parse(tp)   


def tpIPmx700crc(client): 
        tp = client.service.SelectCmDevice("", {'SelectBy':'Name', 'Status':'Any', 'Class':'Any', 
                                                   'NodeName':'cucm8-sub1.ad.crs','Model':'36207'})            
        parse(tp)


def tpIPmx800dual(client):
        tp = client.service.SelectCmDevice("", {'SelectBy':'Name', 'Status':'Any', 'Class':'Any',
                                                'NodeName':'cucm8-sub.ad.crs','Model':'36227'})
        parse(tp)


def main(argv):
    CLIENT1 = createClient()
    CLIENT2 = createClient()
    CLIENT3 = createClient()
    CLIENT4 = createClient()
    CLIENT5 = createClient()
    CLIENT6 = createClient()
    CLIENT7 = createClient()
    tpIPsx10(CLIENT1)    
    tpIPmx300(CLIENT2)
    tpIPmx800crc(CLIENT3)
    tpIPmx800(CLIENT4)
    tpIPmx700crc(CLIENT5)
    tpIPmx800dual(CLIENT6)
    tpIPsx80(CLIENT7)
    print(len(ris_data), " Found:")
    pd.set_option('display.max_rows', 500)
    pd.set_option('display.max_columns', 500)
    pd.set_option('display.width', 1000)
    df = pd.DataFrame(ris_data)
    df.index = np.arange(1, len(df) + 1)
    df.columns = ['Room Name', 'Device Name', 'Number-Status', 'Codec Login']
    print (df)

if __name__=='__main__':
        main(sys.argv[1:])]]></script>
        <scriptargs />
      </command>
    </sequence>
    <uuid>82e64f41-75e8-41e0-9a1a-efd3b4ccc30b</uuid>
  </job>
</joblist>
