<joblist>
  <job>
    <description></description>
    <executionEnabled>true</executionEnabled>
    <id>82e64f41-75e8-41e0-9a1a-efd3b4ccc30b</id>
    <loglevel>INFO</loglevel>
    <name>ListTP</name>
    <notification>
      <onsuccess>
        <email attachLog='true' recipients='c.zhong@fcl.ca' subject='ListTP' />
      </onsuccess>
    </notification>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/usr/bin/python3.4

import ssl
import urllib
import sys, getopt, re, requests
from suds.transport.https import HttpAuthenticated
from suds.client import Client
from suds.sax.element import Element
from xml.etree import ElementTree
from suds.xsd.doctor import Import
from suds.xsd.doctor import ImportDoctor
import pickle
import pandas as pd
import numpy as np
from functools import wraps

ris_data = []

def pk():
    pickle_in = open("/opt/credential/pwds","rb")
    dict = pickle.load(pickle_in)
    return dict

def createClient():
    cmserver = '10.41.40.10'
    cmport = '8443'
    username = 'ccmadmin'
    pwd = pk()
    password = pwd[1]
    location = 'https://' + cmserver + ':' + cmport + '/realtimeservice/services/RisPort70?wsdl'

    t = HttpAuthenticated(username=username, password=password)
    t.handler=urllib.request.HTTPBasicAuthHandler(t.pm)

    ssl_def_context = ssl.create_default_context()
    ssl_def_context.check_hostname = False
    ssl_def_context.verify_mode = ssl.CERT_NONE

    t1=urllib.request.HTTPSHandler(context=ssl_def_context)
    t.urlopener = urllib.request.build_opener(t.handler,t1)
    wsdl ='file:///opt/tempfile/axlsqltoolkit/schema/current/AXLAPI.wsdl'

    imp = Import('http://schemas.xmlsoap.org/soap/encoding/')
    doctor = ImportDoctor(imp)

    client=Client(url=location, transport=t, doctor=doctor)
    return client

def parse(tp):
    for node in tp['SelectCmDeviceResult'].CmNodes:
        for dev in node.CmDevices:
            name = dev.Name
            desc = dev.Description
            dirn = dev.DirNumber
            ip = "http://" + dev.IPAddress[0][0] + "/web/signin"
            global ris_data
            ris_data.append([desc,name,dirn,ip])

# Decorator: Creates client, prase tp            
def tpIP_with_NN_M(NN,M):
    def add_wrapping(item):
        @wraps(item)
        def wrapped_item():
            client = createClient()
            tp = client.service.SelectCmDevice("", {'SelectBy': 'Name', 'Status': 'Any', 'Class': 'Any','NodeName': NN, 'Model': M})
            parse(tp)
        return wrapped_item
    return add_wrapping

@tpIP_with_NN_M('cucm8-sub1.ad.crs','682')
def tpIPsx10():
    pass

@tpIP_with_NN_M('cucm8-sub.ad.crs','688')
def tpIPsx80():
    pass
    
@tpIP_with_NN_M('cucm8-sub.ad.crs','690')
def tpIPmx300():
    pass

@tpIP_with_NN_M('cucm8-sub1.ad.crs','36208')
def tpIPmx800crc():
    pass
    
@tpIP_with_NN_M('cucm8-sub.ad.crs','36208')
def tpIPmx800():
    pass

@tpIP_with_NN_M('cucm8-sub1.ad.crs','36207')
def tpIPmx700crc():
    pass
 
@tpIP_with_NN_M('cucm8-sub.ad.crs','36227')
def tpIPmx800dual():
    pass

def main(argv):
    tpIPsx10()
    tpIPsx80()
    tpIPmx300()
    tpIPmx800crc()
    tpIPmx800()
    tpIPmx700crc()
    tpIPmx800dual()

    print(len(ris_data), " Found:")

# Pandas formatting
    pd.set_option('display.max_rows', 500)
    pd.set_option('display.max_columns', 500)
    pd.set_option('display.width', 1000)
    df = pd.DataFrame(ris_data)
    df.index = np.arange(1, len(df) + 1)
    df.columns = ['Room Name', 'Device Name', 'Number-Status', 'Codec Login']
    print (df)

if __name__=='__main__':
        main(sys.argv[1:])]]></script>
        <scriptargs />
      </command>
    </sequence>
    <uuid>82e64f41-75e8-41e0-9a1a-efd3b4ccc30b</uuid>
  </job>
</joblist>
